using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using System.Web.Security;
using System.Web.SessionState;
using System.Web.Http;
using System.Web.Http.Dispatcher;
using AspNet.Angular.Web.Logic;
using AspNet.Angular.Web.App_Start;
using System.Web.Optimization;
using System.Web.Helpers;
using System.Configuration;

namespace AspNet.Angular.Web
{
    public class Global : HttpApplication
    { 

        protected void Application_BeginRequest(object sender, EventArgs e)
        {
        }

        void Application_Start(object sender, EventArgs e)
        {
            var currentWebApiActivator = GlobalConfiguration.Configuration.Services.GetHttpControllerActivator();
            ControllerBuilder.Current.SetControllerFactory(new MefControllerFactory());
            GlobalConfiguration.Configuration.Services.Replace(typeof(IHttpControllerSelector), new NamespaceHttpControllerSelector(GlobalConfiguration.Configuration));

            // Code that runs on application startup
            AreaRegistration.RegisterAllAreas();
            GlobalConfiguration.Configure(WebApiConfig.Register);
            RouteConfig.RegisterRoutes(RouteTable.Routes);            
            BundleConfig.RegisterBundles(BundleTable.Bundles);
        }
               
        private void RedirectToCatastrophicPage()
        {
            Response.Redirect("~/Error/");
        }

        protected void Application_Error(object sender, EventArgs e)
        {
            try
            {
                var lastErr = Server.GetLastError();
                bool isRedirectToCatastrophicPage = false;
                if (lastErr?.Message != null)
                {
                    // These errors are common and must be ignored.
                    // The site, for some reason, is "polled" resulting in these messages.
                    if ((lastErr.Message.IndexOf("/EWS/", StringComparison.OrdinalIgnoreCase) >= 0) ||
                        // The error here may be generated by either a bad page or the load balancer
                        // after a redirect.
                        (lastErr.Message.IndexOf("/Error/", StringComparison.OrdinalIgnoreCase) >= 0))
                    {
                        return;
                    }
                    if (lastErr.Message.IndexOf("An error occurred when trying to create a controller", StringComparison.OrdinalIgnoreCase) >= 0
                        || lastErr.Message.IndexOf("was not found or does not implement IController", StringComparison.OrdinalIgnoreCase) >= 0)
                    {
                        isRedirectToCatastrophicPage = true;
                        RedirectToCatastrophicPage();
                    }                    
                }

                if (!isRedirectToCatastrophicPage)
                {
                    Response.Redirect("~/Error/");
                }                
            }
            catch (Exception ex)
            {                
            }
        }
    }
}