using System;
using System.Runtime.CompilerServices;

namespace AspNet.Angular.Contracts
{
    public interface ILogger
    {
        void Log(string message);

        /// <summary>
        /// Logs an informational (debug) level entry. (No emails are sent.)
        /// </summary>
        /// <param name="moduleName">The name of the module responsible for the logging.</param>
        /// <param name="summary">A readable text message about the event generated by the developer.</param>
        /// <param name="detail">Additional detailed information on the event.</param>
        /// <param name="fileDescription">Description of the file generating the log.</param>
        /// <param name="methodDescription">Description of the method generating the log.</param>
        /// <param name="lineNumber">The line number of the generated log.</param>
        /// <returns>The resulting status of the log process.</returns>
        Result LogInformation(string moduleName, string summary, string detail,
            [CallerFilePath] string fileDescription = null, [CallerMemberName] string methodDescription = null,
            [CallerLineNumber] int lineNumber = 0);

        /// <summary>
        /// Logs a warning level entry. (No emails are sent.)
        /// </summary>
        /// <param name="moduleName">The name of the module responsible for the logging.</param>
        /// <param name="summary">A readable text message about the event generated by the developer.</param>
        /// <param name="detail">Additional detailed information on the event.</param>
        /// <param name="fileDescription">Description of the file generating the log.</param>
        /// <param name="methodDescription">Description of the method generating the log.</param>
        /// <param name="lineNumber">The line number of the generated log.</param>
        /// <returns>The resulting status of the log process.</returns>
        Result LogWarning(string moduleName, string summary, string detail,
            [CallerFilePath] string fileDescription = null, [CallerMemberName] string methodDescription = null,
            [CallerLineNumber] int lineNumber = 0);

        /// <summary>
        /// Logs an error level entry. (No emails are sent.)
        /// </summary>
        /// <param name="moduleName">The name of the module responsible for the logging.</param>
        /// <param name="summary">A readable text message about the event generated by the developer.</param>
        /// <param name="detail">Additional detailed information on the event.</param>
        /// <param name="ex">The exception object from the error - null for none.</param>
        /// <param name="fileDescription">Description of the file generating the log.</param>
        /// <param name="methodDescription">Description of the method generating the log.</param>
        /// <param name="lineNumber">The line number of the generated log.</param>
        /// <returns>The resulting status of the log process.</returns>
        Result LogError(string moduleName, string summary, string detail, Exception ex,
            [CallerFilePath] string fileDescription = null, [CallerMemberName] string methodDescription = null,
            [CallerLineNumber] int lineNumber = 0);

        /// <summary>
        /// Logs an error level entnry and sets up the email notication.
        /// </summary>
        /// <param name="moduleName">The name of the module responsible for the logging.</param>
        /// <param name="summary"></param>
        /// <param name="detail">Additional detailed information on the event.</param>
        /// <param name="ex"></param>
        /// <param name="fileDescription">Description of the file generating the log.</param>
        /// <param name="methodDescription">Description of the method generating the log.</param>
        /// <param name="lineNumber">The line number of the generated log.</param>
        /// <returns>The resulting status of the log process.</returns>
        Result LogCritical(string moduleName, string summary, string detail, Exception ex,
            [CallerFilePath] string fileDescription = null, [CallerMemberName] string methodDescription = null,
            [CallerLineNumber] int lineNumber = 0);

        Result SendNotification(string to, string subject, string body);

    }
}
